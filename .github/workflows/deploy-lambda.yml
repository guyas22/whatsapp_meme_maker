name: Deploy Lambda with Docker

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    if: startsWith(github.event.head_commit.message, 'be/')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Authenticate with AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION

    - name: Ensure ECR Repository Exists
      run: |
        aws ecr describe-repositories --repository-names meme-generator --region ${{ secrets.AWS_REGION }} || \
        aws ecr create-repository --repository-name meme-generator --region ${{ secrets.AWS_REGION }}

    - name: Authenticate Docker with AWS ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker Image
      run: |
        docker build -t meme-generator .

    - name: Tag Docker Image
      run: |
        docker tag meme-generator:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/meme-generator:latest

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/meme-generator:latest

    - name: Deploy or Update Lambda Function
      run: |
        FUNCTION_NAME="meme-generator-api"
        IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/meme-generator:latest"

        # Check if the Lambda function already exists
        aws lambda get-function --function-name $FUNCTION_NAME --region ${{ secrets.AWS_REGION }} || FUNCTION_EXISTS=false

        if [ "$FUNCTION_EXISTS" == "false" ]; then
          # Create a new Lambda function
          aws lambda create-function \
            --function-name $FUNCTION_NAME \
            --package-type Image \
            --code ImageUri=$IMAGE_URI \
            --role ${{ secrets.AWS_LAMBDA_ROLE_ARN }} \
            --region ${{ secrets.AWS_REGION }}
        else
          # Update the existing Lambda function
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region ${{ secrets.AWS_REGION }}
        fi

    - name: Create or Update API Gateway
      run: |
        API_NAME="meme-generator-api"
        
        # Check if API exists
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${API_NAME}'].id" --output text)
        
        if [ -z "$API_ID" ]; then
          # Create new API
          API_ID=$(aws apigateway create-rest-api \
            --name ${API_NAME} \
            --endpoint-configuration types=REGIONAL \
            --query 'id' --output text)
          
          # Get root resource ID
          ROOT_ID=$(aws apigateway get-resources \
            --rest-api-id ${API_ID} \
            --query 'items[?path==`/`].id' --output text)
          
          # Create /api resource
          API_RESOURCE_ID=$(aws apigateway create-resource \
            --rest-api-id ${API_ID} \
            --parent-id ${ROOT_ID} \
            --path-part "api" \
            --query 'id' --output text)
          
          # Create methods and integrate with Lambda
          for path in "ingest-chat" "generate-meme"; do
            # Create resource
            RESOURCE_ID=$(aws apigateway create-resource \
              --rest-api-id ${API_ID} \
              --parent-id ${API_RESOURCE_ID} \
              --path-part ${path} \
              --query 'id' --output text)
            
            # Create POST method
            aws apigateway put-method \
              --rest-api-id ${API_ID} \
              --resource-id ${RESOURCE_ID} \
              --http-method POST \
              --authorization-type NONE \
              --no-api-key-required
            
            # Create Lambda integration
            aws apigateway put-integration \
              --rest-api-id ${API_ID} \
              --resource-id ${RESOURCE_ID} \
              --http-method POST \
              --type AWS_PROXY \
              --integration-http-method POST \
              --uri arn:aws:apigateway:${AWS_REGION}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS_REGION}:${AWS_ACCOUNT_ID}:function:${FUNCTION_NAME}/invocations
            
            # Enable CORS
            aws apigateway put-method-response \
              --rest-api-id ${API_ID} \
              --resource-id ${RESOURCE_ID} \
              --http-method POST \
              --status-code 200 \
              --response-parameters "method.response.header.Access-Control-Allow-Origin=true"
          done
          
          # Deploy API
          aws apigateway create-deployment \
            --rest-api-id ${API_ID} \
            --stage-name default
        fi
        
        # Add Lambda permission for API Gateway
        aws lambda add-permission \
          --function-name ${FUNCTION_NAME} \
          --statement-id apigateway-access \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${AWS_REGION}:${AWS_ACCOUNT_ID}:${API_ID}/*/*" \
          || true  # Ignore if permission already exists

        # Output the API URL
        echo "API URL: https://${API_ID}.execute-api.${AWS_REGION}.amazonaws.com/default"
